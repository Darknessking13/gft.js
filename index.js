const fs = require('fs');
const path = require('path');

// Emoji mapping for different file types
const emojiMap = {
    // Programming & Scripts
    '.js': 'üìú',
    '.py': 'üêç',
    '.java': '‚òï',
    '.cpp': '‚ö°',
    '.c': 'üîå',
    '.cs': 'üéÆ',
    '.rb': 'üíé',
    '.php': 'üêò',
    '.ts': 'üî∑',
    '.go': 'üêπ',
    '.rust': 'ü¶Ä',
    '.swift': 'ü¶Ö',
    '.kt': 'üß©',
    '.sh': 'üêö',
    '.bat': 'üñ•Ô∏è',
    '.ps1': 'üíª',
    '.sql': 'üóÉÔ∏è',

    // Documents & Text
    '.txt': 'üìù',
    '.docx': 'üìò',
    '.doc': 'üìò',
    '.pdf': 'üìë',
    '.md': 'üìñ',
    '.rtf': 'üìÑ',
    '.tex': 'üìê',
    '.csv': 'üìä',
    '.xlsx': 'üìä',
    '.xls': 'üìä',
    '.pptx': 'üìä',
    '.ppt': 'üìä',
    '.odt': 'üìù',
    '.ods': 'üìä',

    // Web Files
    '.html': 'üåê',
    '.htm': 'üåê',
    '.css': 'üé®',
    '.scss': 'üé®',
    '.sass': 'üé®',
    '.less': 'üé®',
    '.json': 'üì¶',
    '.xml': 'üß¨',
    '.svg': 'üî∑',
    '.yaml': 'üìã',
    '.yml': 'üìã',

    // Images
    '.jpg': 'üñºÔ∏è',
    '.jpeg': 'üñºÔ∏è',
    '.png': 'üñºÔ∏è',
    '.gif': 'üñºÔ∏è',
    '.bmp': 'üñºÔ∏è',
    '.tiff': 'üñºÔ∏è',
    '.webp': 'üñºÔ∏è',
    '.ico': 'üèûÔ∏è',
    '.ai': 'üé≠',
    '.psd': 'üé≠',

    // Audio & Video
    '.mp3': 'üéµ',
    '.wav': 'üéµ',
    '.flac': 'üéµ',
    '.ogg': 'üéµ',
    '.mp4': 'üé¨',
    '.avi': 'üé¨',
    '.mov': 'üé¨',
    '.wmv': 'üé¨',
    '.mkv': 'üé¨',
    '.webm': 'üé¨',

    // Archives
    '.zip': 'üóúÔ∏è',
    '.rar': 'üóúÔ∏è',
    '.7z': 'üóúÔ∏è',
    '.tar': 'üóúÔ∏è',
    '.gz': 'üóúÔ∏è',
    '.tgz': 'üóúÔ∏è',

    // Executables & Binaries
    '.exe': '‚öôÔ∏è',
    '.dll': 'üß∞',
    '.so': 'üß∞',
    '.app': 'üì±',
    '.apk': 'üì±',
    '.deb': 'üì¶',
    '.rpm': 'üì¶',

    // Configuration Files
    '.ini': '‚öôÔ∏è',
    '.conf': '‚öôÔ∏è',
    '.config': '‚öôÔ∏è',
    '.env': 'üîê',
    '.gitignore': 'üëÅÔ∏è‚Äçüó®Ô∏è',
    '.lock': 'üîí',
    '.toml': '‚öôÔ∏è',
    
    // Font Files
    '.ttf': 'üî§',
    '.otf': 'üî§',
    '.woff': 'üî§',
    '.woff2': 'üî§',
    
    // Data Files
    '.db': 'üóÑÔ∏è',
    '.sqlite': 'üóÑÔ∏è',
    '.bak': 'üîÑ',

    // 3D & CAD
    '.obj': 'üßä',
    '.stl': 'üßä',
    '.fbx': 'üßä',
    '.blend': 'üßä',
    '.dwg': 'üìê',
    
    // Default for other files
    '_default': 'üìÑ'
};

// ASCII tree characters
const asciiChars = {
    branch: '‚îú‚îÄ‚îÄ ',
    lastBranch: '‚îî‚îÄ‚îÄ ',
    vertical: '‚îÇ   ',
    space: '    '
};

function getEmoji(extension) {
    return emojiMap[extension] || emojiMap['_default'];
}

function sortItems(items, folderPath) {
    const dirs = [];
    const files = [];
    
    for (const item of items) {
        const itemPath = path.join(folderPath, item);
        if (!fs.existsSync(itemPath)) continue;
        
        try {
            const stats = fs.statSync(itemPath);
            if (stats.isDirectory()) {
                dirs.push(item);
            } else {
                files.push(item);
            }
        } catch (error) {
            console.error(`Error accessing ${itemPath}: ${error.message}`);
        }
    }
    
    dirs.sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
    files.sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));
    
    return [...dirs, ...files];
}

// A writer that accumulates lines in a string
class StringWriter {
    constructor() {
        this.lines = [];
        this.lineNumber = 1;
    }
    
    write(line, showLineNumbers = false) {
        if (showLineNumbers) {
            const padded = String(this.lineNumber).padStart(4, ' ');
            this.lines.push(`${padded} ${line}`);
        } else {
            this.lines.push(line);
        }
        this.lineNumber++;
    }
    
    toString() {
        return this.lines.join('\n');
    }
}

/**
 * Internal function that recursively generates the file structure.
 * @param {string} folderPath - Folder to scan.
 * @param {object} outputWriter - Writer instance.
 * @param {object} options - Options: { showEmoji, showLineNumbers }.
 * @param {string} prefix - Prefix string for tree branches.
 * @param {boolean} isRoot - Flag for root folder.
 */
function generateFileStructure(folderPath, outputWriter, options = {}, prefix = "", isRoot = true) {
    const { showEmoji = true, showLineNumbers = false } = options;
    
    try {
        if (isRoot) {
            const folderName = path.basename(folderPath);
            // Root folder line (plain text)
            const line = showEmoji ? `üìÅ ${folderName}/` : `${folderName}/`;
            outputWriter.write(line, showLineNumbers);
        }
        
        let items = fs.readdirSync(folderPath);
        items = sortItems(items, folderPath);
        
        items.forEach((item, index) => {
            const itemPath = path.join(folderPath, item);
            if (!fs.existsSync(itemPath)) return;
            
            try {
                const stats = fs.statSync(itemPath);
                const isLast = index === items.length - 1;
                const branchChar = isLast ? asciiChars.lastBranch : asciiChars.branch;
                const childPrefix = prefix + (isLast ? asciiChars.space : asciiChars.vertical);
                
                if (stats.isDirectory()) {
                    const line = `${prefix}${branchChar}${showEmoji ? 'üìÅ ' : ''}${item}/`;
                    outputWriter.write(line, showLineNumbers);
                    generateFileStructure(itemPath, outputWriter, options, childPrefix, false);
                } else {
                    const ext = path.extname(item).toLowerCase();
                    const line = `${prefix}${branchChar}${showEmoji ? getEmoji(ext) + ' ' : ''}${item}`;
                    outputWriter.write(line, showLineNumbers);
                }
            } catch (error) {
                if (error.code === 'EACCES') {
                    const line = `${prefix}${asciiChars.lastBranch}üö´ Permission denied: ${item}`;
                    outputWriter.write(line, showLineNumbers);
                } else {
                    console.error(`Error processing ${itemPath}: ${error.message}`);
                }
            }
        });
    } catch (error) {
        if (error.code === 'EACCES') {
            const line = `${prefix}${asciiChars.lastBranch}üö´ Permission denied: ${path.basename(folderPath)}`;
            outputWriter.write(line, showLineNumbers);
        } else {
            console.error(`An error occurred: ${error.message}`);
        }
    }
}

/**
 * Generates a plain-text file tree for the given folder.
 * @param {string} folderPath - The directory to scan.
 * @param {object} options - Options for generating the tree.
 *        options.showEmoji {boolean} - (default true) Include emojis/icons.
 *        options.showLineNumbers {boolean} - (default false) Include line numbers.
 * @returns {string} - The generated file tree as a plain-text string.
 */
function generateFileTree(folderPath, options = {}) {
    if (!fs.existsSync(folderPath)) {
        throw new Error("The specified folder does not exist.");
    }
    const writer = new StringWriter();
    generateFileStructure(folderPath, writer, options);
    return writer.toString();
}

module.exports = { generateFileTree };
